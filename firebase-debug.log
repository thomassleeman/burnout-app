[debug] [2023-12-14T15:35:27.521Z] ----------------------------------------------------------------------
[debug] [2023-12-14T15:35:27.522Z] Command:       /usr/local/bin/node /usr/local/bin/firebase ext:install firebase/storage-resize-images --project=burnout-project
[debug] [2023-12-14T15:35:27.522Z] CLI Version:   13.0.1
[debug] [2023-12-14T15:35:27.522Z] Platform:      darwin
[debug] [2023-12-14T15:35:27.522Z] Node Version:  v18.16.0
[debug] [2023-12-14T15:35:27.523Z] Time:          Thu Dec 14 2023 15:35:27 GMT+0000 (Greenwich Mean Time)
[debug] [2023-12-14T15:35:27.523Z] ----------------------------------------------------------------------
[debug] 
[debug] [2023-12-14T15:35:27.552Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2023-12-14T15:35:27.552Z] > authorizing via signed-in user (sleemantom@gmail.com)
[debug] [2023-12-14T15:35:27.552Z] [iam] checking project burnout-project for permissions ["firebase.projects.get","firebaseextensions.instances.create"]
[debug] [2023-12-14T15:35:27.553Z] > refreshing access token with scopes: []
[debug] [2023-12-14T15:35:27.554Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2023-12-14T15:35:27.554Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-12-14T15:35:27.671Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2023-12-14T15:35:27.671Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2023-12-14T15:35:27.683Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:testIamPermissions [none]
[debug] [2023-12-14T15:35:27.683Z] >>> [apiv2][(partial)header] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:testIamPermissions x-goog-quota-user=projects/burnout-project
[debug] [2023-12-14T15:35:27.683Z] >>> [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[debug] [2023-12-14T15:35:28.559Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:testIamPermissions 200
[debug] [2023-12-14T15:35:28.559Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:testIamPermissions {"permissions":["firebase.projects.get","firebaseextensions.instances.create"]}
[info] i  extensions: ensuring required API firebaseextensions.googleapis.com is enabled... 
[debug] [2023-12-14T15:35:28.561Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/burnout-project/services/firebaseextensions.googleapis.com [none]
[debug] [2023-12-14T15:35:28.561Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/burnout-project/services/firebaseextensions.googleapis.com x-goog-quota-user=projects/burnout-project
[debug] [2023-12-14T15:35:29.487Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/burnout-project/services/firebaseextensions.googleapis.com 200
[debug] [2023-12-14T15:35:29.488Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/burnout-project/services/firebaseextensions.googleapis.com [omitted]
[info] ✔  extensions: required API firebaseextensions.googleapis.com is enabled 
[debug] [2023-12-14T15:35:29.491Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project [none]
[debug] [2023-12-14T15:35:29.728Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project 200
[debug] [2023-12-14T15:35:29.728Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project {"projectId":"burnout-project","projectNumber":"941881196808","displayName":"The Burnout Project","name":"projects/burnout-project","resources":{"hostingSite":"burnout-project","storageBucket":"burnout-project.appspot.com","locationId":"europe-west2"},"state":"ACTIVE","etag":"1_0a7baf8e-fc98-4d25-ab02-0e57a53b81bb"}
[info] i  extensions: Checking project IAM policy... 
[debug] [2023-12-14T15:35:29.730Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/projects/burnout-project/instances pageSize=100&pageToken=
[debug] [2023-12-14T15:35:30.504Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/projects/burnout-project/instances 200
[debug] [2023-12-14T15:35:30.505Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/projects/burnout-project/instances {}
[debug] [2023-12-14T15:35:30.505Z] >>> [apiv2][query] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:getIamPolicy [none]
[debug] [2023-12-14T15:35:30.818Z] <<< [apiv2][status] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:getIamPolicy 200
[debug] [2023-12-14T15:35:30.819Z] <<< [apiv2][body] POST https://cloudresourcemanager.googleapis.com/v1/projects/burnout-project:getIamPolicy {"version":1,"etag":"BwYA12/XxZM=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:941881196808@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-941881196808@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-941881196808@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:941881196808@cloudservices.gserviceaccount.com","serviceAccount:burnout-project@appspot.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-941881196808@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-941881196808@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firebasestorage.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firebasestorage.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:sleemantom@gmail.com"]},{"role":"roles/storage.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]}]}
[debug] {"version":1,"etag":"BwYA12/XxZM=","bindings":[{"role":"roles/artifactregistry.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-artifactregistry.iam.gserviceaccount.com"]},{"role":"roles/cloudbuild.builds.builder","members":["serviceAccount:941881196808@cloudbuild.gserviceaccount.com"]},{"role":"roles/cloudbuild.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-cloudbuild.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/cloudfunctions.serviceAgent","members":["serviceAccount:service-941881196808@gcf-admin-robot.iam.gserviceaccount.com"]},{"role":"roles/containerregistry.ServiceAgent","members":["serviceAccount:service-941881196808@containerregistry.iam.gserviceaccount.com"]},{"role":"roles/editor","members":["serviceAccount:941881196808@cloudservices.gserviceaccount.com","serviceAccount:burnout-project@appspot.gserviceaccount.com"]},{"role":"roles/firebase.managementServiceAgent","members":["serviceAccount:firebase-service-account@firebase-sa-management.iam.gserviceaccount.com","serviceAccount:service-941881196808@gcp-sa-firebase.iam.gserviceaccount.com"]},{"role":"roles/firebase.sdkAdminServiceAgent","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/firebaseauth.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/firebasemods.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firebasemods.iam.gserviceaccount.com"]},{"role":"roles/firebaserules.system","members":["serviceAccount:service-941881196808@firebase-rules.iam.gserviceaccount.com"]},{"role":"roles/firebasestorage.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firebasestorage.iam.gserviceaccount.com"]},{"role":"roles/firestore.serviceAgent","members":["serviceAccount:service-941881196808@gcp-sa-firestore.iam.gserviceaccount.com"]},{"role":"roles/iam.serviceAccountTokenCreator","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]},{"role":"roles/owner","members":["user:sleemantom@gmail.com"]},{"role":"roles/storage.admin","members":["serviceAccount:firebase-adminsdk-7fa5o@burnout-project.iam.gserviceaccount.com"]}]}
[info] ✔  extensions: Project IAM policy OK 
[debug] [2023-12-14T15:35:30.821Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images [none]
[debug] [2023-12-14T15:35:31.529Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images 200
[debug] [2023-12-14T15:35:31.529Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images {"name":"publishers/firebase/extensions/storage-resize-images","ref":"firebase/storage-resize-images","latestVersion":"0.2.2","latestVersionCreateTime":"2023-11-30T18:30:39.937277Z","state":"PUBLISHED","createTime":"2021-03-18T22:07:59.572345Z","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/extension_icons/firebase/resize_images_120@2x.png","publisher":{"displayName":"Firebase","iconUri":"https://storage.googleapis.com/firebase-extensions-icons/publisher_icons/firebase/firebase_128dp.png"},"repoUri":"https://github.com/firebase/extensions","metrics":{"activeInstallCount":"19700"},"latestApprovedVersion":"0.2.2"}
[debug] [2023-12-14T15:35:31.531Z] >>> [apiv2][query] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images/versions/0.2.2 [none]
[debug] [2023-12-14T15:35:32.244Z] <<< [apiv2][status] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images/versions/0.2.2 200
[debug] [2023-12-14T15:35:32.245Z] <<< [apiv2][body] GET https://firebaseextensions.googleapis.com/v1beta/publishers/firebase/extensions/storage-resize-images/versions/0.2.2 {"name":"publishers/firebase/extensions/storage-resize-images/versions/0.2.2","ref":"firebase/storage-resize-images@0.2.2","spec":{"specVersion":"v1beta","name":"storage-resize-images","version":"0.2.2","description":"Resizes images uploaded to Cloud Storage to a specified size, and optionally keeps or deletes the original image.","apis":[{"apiName":"storage-component.googleapis.com","reason":"Needed to use Cloud Storage"}],"roles":[{"role":"storage.admin","reason":"Allows the extension to store resized images in Cloud Storage"}],"resources":[{"name":"generateResizedImage","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: ${param:FUNCTION_MEMORY}\neventTrigger:\n  eventType: google.storage.object.finalize\n  resource: projects/_/buckets/${param:IMG_BUCKET}\nruntime: nodejs18\n","description":"Listens for new images uploaded to your specified Cloud Storage bucket, resizes the images, then stores the resized images in the same bucket. Optionally keeps or deletes the original images.","deletionPolicy":"DELETE"},{"name":"backfillResizedImages","type":"firebaseextensions.v1beta.function","propertiesYaml":"availableMemoryMb: ${param:FUNCTION_MEMORY}\nruntime: nodejs18\ntaskQueueTrigger: {}\n","description":"Handles tasks from startBackfill to resize existing images.","deletionPolicy":"DELETE"}],"billingRequired":true,"author":{"authorName":"Firebase","url":"https://firebase.google.com"},"contributors":[{"authorName":"Tina Liang","url":"https://github.com/tinaliang"},{"authorName":"Chris Bianca","email":"chris@csfrequency.com","url":"https://github.com/chrisbianca"},{"authorName":"Invertase","email":"oss@invertase.io","url":"https://github.com/invertase"}],"license":"Apache-2.0","releaseNotesUrl":"https://github.com/firebase/extensions/blob/master/storage-resize-images/CHANGELOG.md","sourceUrl":"https://github.com/firebase/extensions/tree/master/storage-resize-images","params":[{"param":"IMG_BUCKET","label":"Cloud Storage bucket for images","type":"SELECT_RESOURCE","description":"To which Cloud Storage bucket will you upload images that you want to resize? Resized images will be stored in this bucket. Depending on your extension configuration, original images are either kept or deleted. It is recommended to create a separate bucket for this extension. For more information, refer to the [pre-installation guide](https://firebase.google.com/products/extensions/storage-resize-images).\n","required":true,"default":"${STORAGE_BUCKET}","example":"my-project-12345.appspot.com","validationRegex":"^([0-9a-z_.-]*)$","validationErrorMessage":"Invalid storage bucket","resourceInfo":{"resourceType":"storage.googleapis.com/Bucket"}},{"param":"IMG_SIZES","label":"Sizes of resized images","type":"STRING","description":"What sizes of images would you like (in pixels)? Enter the sizes as a comma-separated list of WIDTHxHEIGHT values. Learn more about [how this parameter works](https://firebase.google.com/products/extensions/storage-resize-images).\n","required":true,"default":"200x200","example":"200x200","validationRegex":"^\\d+x(\\d+,\\d+x)*\\d+$","validationErrorMessage":"Invalid sizes, must be a comma-separated list of WIDTHxHEIGHT values."},{"param":"DELETE_ORIGINAL_FILE","label":"Deletion of original file","type":"SELECT","description":"Do you want to automatically delete the original file from the Cloud Storage bucket? warning: these deletions cannot be undone, and if you reconfigure this instance to use different image dimensions, you won't be able to backfill deleted images.","required":true,"options":[{"value":"false","label":"Don't delete"},{"value":"true","label":"Delete on any resize attempt"},{"value":"on_success","label":"Delete only on successful resize attempts"}],"default":"false"},{"param":"MAKE_PUBLIC","label":"Make resized images public","type":"SELECT","description":"Do you want to make the resized images public automatically? So you can access them by URL. For example: https://storage.googleapis.com/{bucket}/{path}","options":[{"value":"true","label":"Yes"},{"value":"false","label":"No"}],"default":"false"},{"param":"RESIZED_IMAGES_PATH","label":"Cloud Storage path for resized images","type":"STRING","description":"A relative path in which to store resized images. For example, if you specify a path here of `thumbs` and you upload an image to `/images/original.jpg`, then the resized image is stored at `/images/thumbs/original_200x200.jpg`. If you prefer to store resized images at the root of your bucket, leave this field empty.\n","example":"thumbnails"},{"param":"INCLUDE_PATH_LIST","label":"Paths that contain images you want to resize","type":"STRING","description":"Restrict storage-resize-images to only resize images in specific locations in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, specifying the paths `/users/pictures,/restaurants/menuItems` will resize any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would include any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`. \nIf you prefer not to explicitly restrict to certain directories of your Storage bucket, leave this field empty.\n","example":"/users/avatars,/design/pictures","validationRegex":"^(\\/[^\\s\\/\\,]+)+(\\,(\\/[^\\s\\/\\,]+)+)*$","validationErrorMessage":"Invalid paths, must be a comma-separated list of absolute path values."},{"param":"EXCLUDE_PATH_LIST","label":"List of absolute paths not included for resized images","type":"STRING","description":"Ensure storage-resize-images does *not* resize images in _specific locations_ in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, to *exclude* the images  stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`.\nIf you prefer to resize every image uploaded to your Storage bucket,  leave this field empty.\n","example":"/users/avatars/thumbs,/design/pictures/thumbs","validationRegex":"^(\\/[^\\s\\/\\,]+)+(\\,(\\/[^\\s\\/\\,]+)+)*$","validationErrorMessage":"Invalid paths, must be a comma-separated list of absolute path values."},{"param":"FAILED_IMAGES_PATH","label":"Cloud Storage path for failed images","type":"STRING","description":"A relative path in which to store failed images. For example, if you specify a path here of `failed` and you upload an image to `/images/original.jpg`, then resizing failed, the image will be stored at `/images/failed/original.jpg`.\nLeave this field empty if you do not want to store failed images in a separate directory.\n","example":"failed","validationRegex":"^([^\\/.]*|)$","validationErrorMessage":"Values cannot include \"/\", \".\"."},{"param":"CACHE_CONTROL_HEADER","label":"Cache-Control header for resized images","type":"STRING","description":"This extension automatically copies any `Cache-Control` metadata from the original image to the resized images. For the resized images, do you want to overwrite this copied `Cache-Control` metadata or add `Cache-Control` metadata? Learn more about [`Cache-Control` headers](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control). If you prefer not to overwrite or add `Cache-Control` metadata, leave this field empty.\n","example":"max-age=86400"},{"param":"IMAGE_TYPE","label":"Convert image to preferred types","type":"MULTISELECT","description":"The image types you'd like your source image to convert to.  The default for this option will be to keep the original file type as the destination file type.\n","required":true,"options":[{"value":"jpeg","label":"jpeg"},{"value":"webp","label":"webp"},{"value":"png","label":"png"},{"value":"tiff","label":"tiff"},{"value":"gif","label":"gif"},{"value":"avif","label":"avif"},{"value":"false","label":"original"}],"default":"false"},{"param":"OUTPUT_OPTIONS","label":"Output options for selected formats","type":"STRING","description":"Provide a optional output option stringified object containing Sharp Output Options for selected image types conversion. eg. `{\"jpeg\": { \"quality\": 5, \"chromaSubsampling\": \"4:4:4\" }, \"png\": { \"pallete\": true }}`\n","validationRegex":"^({(.*?)})$","validationErrorMessage":"Please provide a valid json object."},{"param":"SHARP_OPTIONS","label":"Sharp constructor options for resizing images","type":"STRING","description":"Provide a optional output option stringified object containing Sharp Output Options for selected image types conversion. eg. `{ failonerror: false, limitinputpixels: true }`\n","validationRegex":"^({(.*?)})$","validationErrorMessage":"Please provide a valid json object."},{"param":"IS_ANIMATED","label":"GIF and WEBP animated option","type":"SELECT","description":"Keep animation of GIF and WEBP formats.\n","options":[{"value":"true","label":"Yes"},{"value":"false","label":"No (1st frame only)"}],"default":"true"},{"param":"FUNCTION_MEMORY","label":"Cloud Function memory","type":"SELECT","description":"Memory of the function responsible of resizing images.  Choose how much memory to give to the function that resize images. (For animated GIF => GIF we recommend using a minimum of 2GB).","required":true,"options":[{"value":"512","label":"512 MB"},{"value":"1024","label":"1 GB"},{"value":"2048","label":"2 GB"},{"value":"4096","label":"4 GB"},{"value":"8192","label":"8 GB"}],"default":"1024"},{"param":"DO_BACKFILL","label":"Backfill existing images","type":"SELECT","description":"Should existing, unresized images in the Storage bucket be resized as well?\n","required":true,"options":[{"value":"true","label":"Yes"},{"value":"false","label":"No"}]}],"preinstallContent":"Use this extension to create resized versions of an image uploaded to a Cloud Storage bucket.\n\nWhen you upload a file to your specified Cloud Storage bucket, this extension:\n\n- Detects if the file is an image. If it is, then:\n  - Creates a resized image with your specified dimensions.\n  - Names the resized image using the same name as the original uploaded image, but suffixed with your specified width and height.\n  - Stores the resized image in the same Storage bucket as the original uploaded image.\n\nYou can even configure the extension to create resized images of different dimensions for each original image upload. For example, you might want images that are 200x200, 400x400, and 680x680 - this extension can create these three resized images then store them in your bucket.\n\nThe extension automatically copies the following metadata, if present, from the original image to the resized image(s): `Cache-Control`, `Content-Disposition`, `Content-Encoding`, `Content-Language`, `Content-Type`, and user-provided metadata (a new Firebase storage download token will be generated on the resized image(s) if the original metadata contains a token). Note that you can optionally configure the extension to overwrite the [`Cache-Control`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control) value for the resized image(s).\n\nThe extension supports resizing images in `JPEG`, `PNG`, `WebP`, `GIF`, `AVIF` and `TIFF` formats, and the output can be in one or more of these formats.\n\nThe extension can publish a resize completion event which you can optionally enable when you install the extension. If you enable events, you can [write custom event handlers](https://firebase.google.com/docs/extensions/install-extensions#eventarc) that respond to these events. You can always enable or disable events later. Events will be emitted via Eventarc.\n\n#### Detailed configuration information\n\nTo configure this extension, you specify a maximum width and a maximum height (in pixels, px). This extension keeps the aspect ratio of uploaded images constant and shrinks the image until the resized image's dimensions are at or under your specified max width and height.\n\nFor example, say that you specify a max width of 200px and a max height of 100px. You upload an image that is 480px wide by 640px high, which means a 0.75 aspect ratio. The final resized image will be 75px wide by 100px high to maintain the aspect ratio while also being at or under both of your maximum specified dimensions.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Storage bucket](https://firebase.google.com/docs/storage) in your Firebase project.\n\n> **NOTE**: As mentioned above, this extension listens for all changes made to the specified Cloud Storage bucket. This may cause unnecessary function calls. It is recommended to create a separate Cloud Storage bucket, especially for images you want to resize, and set up this extension to listen to that bucket.\n\n#### Multiple instances of this extension\n\nYou can install multiple instances of this extension for the same project to configure different resizing options for different paths. However, as mentioned before this extension listens for all changes made to the specified Cloud Storage bucket. That means all instances will be triggered every time a file is uploaded to the bucket. Therefore, it is recommended to use different buckets instead of different paths to prevent unnecessary function calls.\n\n#### Troubleshooting\n\nIf events are enabled, and you want to create custom event handlers to respond to the events published by the extension, you must ensure that you have the appropriate [role/permissions](https://cloud.google.com/pubsub/docs/access-control#permissions_and_roles) to subscribe to Pub/Sub events.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n - Cloud Storage\n - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Image Optimization With Firebase Extensions](https://invertase.link/ext-resize-images-tutorial)","postinstallContent":"### See it in action\n\nYou can test out this extension right away!\n\n1.  Go to your [Storage dashboard](https://console.firebase.google.com/project/${param:PROJECT_ID}/storage) in the Firebase console.\n\n1.  Upload an image file to the bucket: `${param:IMG_BUCKET}`\n\n1.  In a few seconds, the resized image(s) appear in the same bucket.\n\n    Note that you might need to refresh the page to see changes.\n\n### Using the extension\n\nYou can upload images using the [Cloud Storage for Firebase SDK](https://firebase.google.com/docs/storage/) for your platform (iOS, Android, or Web). Alternatively, you can upload images directly in the Firebase console's Storage dashboard.\n\nWhenever you upload an image file to `${param:IMG_BUCKET}`, this extension does the following:\n\n- Creates resized image(s) with your specified dimensions.\n- Names resized image(s) using the same name as the original uploaded image, but suffixed with the specified width and height.\n- Stores the resized image(s) in the bucket `${param:IMG_BUCKET}` (and, if configured, under the path `${param:RESIZED_IMAGES_PATH}`).\n\nThe extension also copies the following [metadata](https://cloud.google.com/storage/docs/metadata#mutable), if present, from the original image to the resized image(s):\n\n- `Cache-Control`\n- `Content-Disposition`\n- `Content-Encoding`\n- `Content-Language`\n- `Content-Type`\n- [user-provided metadata](https://cloud.google.com/storage/docs/metadata#custom-metadata)\n - If the original image contains a download token (publicly accessible via a unique download URL), a new download token is generated for the resized image(s). \n - If the original image does not contain a download token, resized image(s) will not be created with unique tokens. To make a resized image publicly accessible, call the [`getDownloadURL`](https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getdownloadurl) method.\n\nBe aware of the following when using this extension:\n\n- Each original image must have a valid [image MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#Image_types) specified in its [`Content-Type` metadata](https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Type) (for example, `image/png`). Below is a list of the content types supported by this extension:\n  * image/jpeg\n  * image/png\n  * image/tiff\n  * image/webp\n  * image/gif\n\nIf you are using raw image data in your application, you need to ensure you set the correct content type when uploading to the Firebase Storage bucket to trigger the extension image resize. Below is an example of how to set the content type:\n\n```js\nconst admin = require(\"firebase-admin\");\nconst serviceAccount = require(\"../path-to-service-account.json\");\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n});\n\nconst storage = admin.storage();\n\n// rawImage param is the binary data read from the file system or downloaded from URL\nfunction uploadImageToStorage(rawImage){\n  const bucket = storage.bucket(\"YOUR FIREBASE STORAGE BUCKET URL\");\n  const file = bucket.file(\"filename.jpeg\");\n\n  file.save(\n    rawImage,\n    {\n      // set the content type to ensure the extension triggers the image resize(s)\n      metadata: { contentType: \"image/jpeg\" },\n    },\n    (error) => {\n      if (error) {\n        throw error;\n      }\n      console.log(\"Successfully uploaded image\");\n    }\n  );\n}\n```\n\n- If you configured the `Cache-Control header for resized images` parameter, your specified value will overwrite the value copied from the original image. Learn more about image metadata in the [Cloud Storage documentation](https://firebase.google.com/docs/storage/).\n\n- If you would like to optionally configure `Output options for selected formats` you can create an JSON stringified object where you can provide file [Sharp Output Options](https://sharp.pixelplumbing.com/api-output#jpeg). Please use file formats as object keys and pass correct options. Incorrect options parameters or not selected formats will be ignored. Provide it as stringified JSON object without outer quote signs and indentation:\n\n```js\n{\"jpeg\": {\"quality\": 5,\"chromaSubsampling\": '4:4:4'}, \"png\": { \"pallete\": true}}\n```\n\n### Monitoring\n\nAs a best practice, you can [monitor the activity](https://firebase.google.com/docs/extensions/manage-installed-extensions#monitor) of your installed extension, including checks on its health, usage, and logs.\n\n### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Image Optimization With Firebase Extensions](https://invertase.link/ext-resize-images-tutorial)","readmeContent":"# Resize Images\n\n**Author**: Firebase (**[https://firebase.google.com](https://firebase.google.com)**)\n\n**Description**: Resizes images uploaded to Cloud Storage to a specified size, and optionally keeps or deletes the original image.\n\n\n\n**Details**: Use this extension to create resized versions of an image uploaded to a Cloud Storage bucket.\n\nWhen you upload a file to your specified Cloud Storage bucket, this extension:\n\n- Detects if the file is an image. If it is, then:\n  - Creates a resized image with your specified dimensions.\n  - Names the resized image using the same name as the original uploaded image, but suffixed with your specified width and height.\n  - Stores the resized image in the same Storage bucket as the original uploaded image.\n\nYou can even configure the extension to create resized images of different dimensions for each original image upload. For example, you might want images that are 200x200, 400x400, and 680x680 - this extension can create these three resized images then store them in your bucket.\n\nThe extension automatically copies the following metadata, if present, from the original image to the resized image(s): `Cache-Control`, `Content-Disposition`, `Content-Encoding`, `Content-Language`, `Content-Type`, and user-provided metadata (a new Firebase storage download token will be generated on the resized image(s) if the original metadata contains a token). Note that you can optionally configure the extension to overwrite the [`Cache-Control`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control) value for the resized image(s).\n\nThe extension supports resizing images in `JPEG`, `PNG`, `WebP`, `GIF`, `AVIF` and `TIFF` formats, and the output can be in one or more of these formats.\n\nThe extension can publish a resize completion event which you can optionally enable when you install the extension. If you enable events, you can [write custom event handlers](https://firebase.google.com/docs/extensions/install-extensions#eventarc) that respond to these events. You can always enable or disable events later. Events will be emitted via Eventarc.\n\n#### Detailed configuration information\n\nTo configure this extension, you specify a maximum width and a maximum height (in pixels, px). This extension keeps the aspect ratio of uploaded images constant and shrinks the image until the resized image's dimensions are at or under your specified max width and height.\n\nFor example, say that you specify a max width of 200px and a max height of 100px. You upload an image that is 480px wide by 640px high, which means a 0.75 aspect ratio. The final resized image will be 75px wide by 100px high to maintain the aspect ratio while also being at or under both of your maximum specified dimensions.\n\n#### Additional setup\n\nBefore installing this extension, make sure that you've [set up a Cloud Storage bucket](https://firebase.google.com/docs/storage) in your Firebase project.\n\n> **NOTE**: As mentioned above, this extension listens for all changes made to the specified Cloud Storage bucket. This may cause unnecessary function calls. It is recommended to create a separate Cloud Storage bucket, especially for images you want to resize, and set up this extension to listen to that bucket.\n\n#### Multiple instances of this extension\n\nYou can install multiple instances of this extension for the same project to configure different resizing options for different paths. However, as mentioned before this extension listens for all changes made to the specified Cloud Storage bucket. That means all instances will be triggered every time a file is uploaded to the bucket. Therefore, it is recommended to use different buckets instead of different paths to prevent unnecessary function calls.\n\n#### Troubleshooting\n\nIf events are enabled, and you want to create custom event handlers to respond to the events published by the extension, you must ensure that you have the appropriate [role/permissions](https://cloud.google.com/pubsub/docs/access-control#permissions_and_roles) to subscribe to Pub/Sub events.\n\n#### Billing\nTo install an extension, your project must be on the [Blaze (pay as you go) plan](https://firebase.google.com/pricing)\n\n- This extension uses other Firebase and Google Cloud Platform services, which have associated charges if you exceed the service’s no-cost tier:\n - Cloud Storage\n - Cloud Functions (Node.js 10+ runtime. [See FAQs](https://firebase.google.com/support/faq#extensions-pricing))\n- If you enable events [Eventarc fees apply](https://cloud.google.com/eventarc/pricing).\n\n#### Further reading & resources\n\nYou can find more information about this extension in the following articles:\n\n- [Image Optimization With Firebase Extensions](https://invertase.link/ext-resize-images-tutorial)\n\n\n\n**Configuration Parameters:**\n\n* Cloud Storage bucket for images: To which Cloud Storage bucket will you upload images that you want to resize? Resized images will be stored in this bucket. Depending on your extension configuration, original images are either kept or deleted. It is recommended to create a separate bucket for this extension. For more information, refer to the [pre-installation guide](https://firebase.google.com/products/extensions/storage-resize-images).\n\n\n* Sizes of resized images: What sizes of images would you like (in pixels)? Enter the sizes as a comma-separated list of WIDTHxHEIGHT values. Learn more about [how this parameter works](https://firebase.google.com/products/extensions/storage-resize-images).\n\n\n* Deletion of original file: Do you want to automatically delete the original file from the Cloud Storage bucket? Warning: these deletions cannot be undone, and if you reconfigure this instance to use different image dimensions, you won't be able to backfill deleted images.\n\n* Make resized images public: Do you want to make the resized images public automatically? So you can access them by URL. For example: https://storage.googleapis.com/{bucket}/{path}\n\n* Cloud Storage path for resized images: A relative path in which to store resized images. For example, if you specify a path here of `thumbs` and you upload an image to `/images/original.jpg`, then the resized image is stored at `/images/thumbs/original_200x200.jpg`. If you prefer to store resized images at the root of your bucket, leave this field empty.\n\n\n* Paths that contain images you want to resize: Restrict storage-resize-images to only resize images in specific locations in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, specifying the paths `/users/pictures,/restaurants/menuItems` will resize any images found in any subdirectories of `/users/pictures` and `/restaurants/menuItems`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would include any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`. \nIf you prefer not to explicitly restrict to certain directories of your Storage bucket, leave this field empty.\n\n\n* List of absolute paths not included for resized images: Ensure storage-resize-images does *not* resize images in _specific locations_ in your Storage bucket by  supplying a comma-separated list of absolute paths. For example, to *exclude* the images  stored in the `/foo/alpha` and its subdirectories and `/bar/beta` and its subdirectories, specify the paths `/foo/alpha,/bar/beta`.\nYou may also use wildcard notation for directories in the path. For example, `/users/*/pictures` would exclude any images in any subdirectories of `/users/foo/pictures` as well as any images in subdirectories of `/users/bar/pictures`, but also any images in subdirectories of `/users/any/level/of/subdirectories/pictures`.\nIf you prefer to resize every image uploaded to your Storage bucket,  leave this field empty.\n\n\n* Cloud Storage path for failed images: A relative path in which to store failed images. For example, if you specify a path here of `failed` and you upload an image to `/images/original.jpg`, then resizing failed, the image will be stored at `/images/failed/original.jpg`.\nLeave this field empty if you do not want to store failed images in a separate directory.\n\n\n* Cache-Control header for resized images: This extension automatically copies any `Cache-Control` metadata from the original image to the resized images. For the resized images, do you want to overwrite this copied `Cache-Control` metadata or add `Cache-Control` metadata? Learn more about [`Cache-Control` headers](https://developer.mozilla.org/docs/Web/HTTP/Headers/Cache-Control). If you prefer not to overwrite or add `Cache-Control` metadata, leave this field empty.\n\n\n* Convert image to preferred types: The image types you'd like your source image to convert to.  The default for this option will be to keep the original file type as the destination file type.\n\n\n* Output options for selected formats: Provide a optional output option stringified object containing Sharp Output Options for selected image types conversion. eg. `{\"jpeg\": { \"quality\": 5, \"chromaSubsampling\": \"4:4:4\" }, \"png\": { \"pallete\": true }}`\n\n\n* Sharp constructor options for resizing images: Provide a optional output option stringified object containing Sharp Output Options for selected image types conversion. eg. `{ failOnError: false, limitInputPixels: true }`\n\n\n* GIF and WEBP animated option: Keep animation of GIF and WEBP formats.\n\n\n* Cloud Function memory: Memory of the function responsible of resizing images.  Choose how much memory to give to the function that resize images. (For animated GIF => GIF we recommend using a minimum of 2GB).\n\n* Backfill existing images: Should existing, unresized images in the Storage bucket be resized as well?\n\n\n\n\n**Cloud Functions:**\n\n* **generateResizedImage:** Listens for new images uploaded to your specified Cloud Storage bucket, resizes the images, then stores the resized images in the same bucket. Optionally keeps or deletes the original images.\n\n* **backfillResizedImages:** Handles tasks from startBackfill to resize existing images.\n\n\n\n**APIs Used**:\n\n* storage-component.googleapis.com (Reason: Needed to use Cloud Storage)\n\n\n\n**Access Required**:\n\n\n\nThis extension will operate with the following project IAM roles:\n\n* storage.admin (Reason: Allows the extension to store resized images in Cloud Storage)\n","lifecycleEvents":[{"stage":"ON_INSTALL","processingMessage":"Resizing existing images in ${param:IMG_BUCKET}","taskQueueTriggerFunction":"backfillResizedImages"},{"stage":"ON_UPDATE","processingMessage":"Resizing existing images in ${param:IMG_BUCKET}","taskQueueTriggerFunction":"backfillResizedImages"},{"stage":"ON_CONFIGURE","processingMessage":"Resizing existing images in ${param:IMG_BUCKET}","taskQueueTriggerFunction":"backfillResizedImages"}],"displayName":"Resize Images","events":[{"type":"firebase.extensions.storage-resize-images.v1.onStart","description":"Occurs when a trigger has been called within the Extension, and will include data such as the context of the trigger request."},{"type":"firebase.extensions.storage-resize-images.v1.onSuccess","description":"Occurs when image resizing completes successfully. The event will contain further details about specific formats and sizes."},{"type":"firebase.extensions.storage-resize-images.v1.onError","description":"Occurs when an issue has been experienced in the Extension. This will include any error data that has been included within the Error Exception."},{"type":"firebase.extensions.storage-resize-images.v1.onCompletion","description":"Occurs when the function is settled. Provides no customized data other than the context."}],"systemParams":[{"param":"firebaseextensions.v1beta.function/timeoutSeconds","label":"Function timeout seconds","type":"STRING","description":"How long should functions run before timing out, in seconds (0-540)?","validationRegex":"^[1-9][0-9]{0,2}$","validationErrorMessage":"Function timeout should be an integer number of seconds, between 0 and 540","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnector","label":"VPC Connector","type":"STRING","description":"The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is projects/*/locations/*/connectors/*.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/connectors/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/vpcConnectorEgressSettings","label":"VPC Connector Egress settings","type":"SELECT","description":"Controls outgoing traffic when a VPC connector is configured","options":[{"value":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","label":"Unspecified"},{"value":"PRIVATE_RANGES_ONLY","label":"Private ranges only"},{"value":"ALL_TRAFFIC","label":"All traffic"}],"default":"VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED","advanced":true},{"param":"firebaseextensions.v1beta.function/minInstances","label":"Minimum function instances","type":"STRING","description":"The minimum number of instances of each function to run at once (0-1000)","default":"0","validationRegex":"^[0-9]*$","validationErrorMessage":"Min instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/maxInstances","label":"Maximum function instances","type":"STRING","description":"The maximum number of instances of each function to run at once","validationRegex":"^[0-9]*$","validationErrorMessage":"Max instances must be a non-negative integer.","advanced":true},{"param":"firebaseextensions.v1beta.function/ingressSettings","label":"Function ingress settings","type":"SELECT","description":"Where should functions allow incoming traffic from?","options":[{"value":"ALLOW_ALL","label":"Allow all"},{"value":"ALLOW_INTERNAL_ONLY","label":"Allow internal only"},{"value":"ALLOW_INTERNAL_AND_GCLB","label":"Allow internal and GCLB"}],"advanced":true},{"param":"firebaseextensions.v1beta.function/labels","label":"Function labels","type":"STRING","description":"Do you wish to set any labels on this instance's Cloud Functions? If so, provide up to 55 labels in the format 'key1:value, key2:value'","validationRegex":"^([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63},\\s*)*([a-zžà-ÿ][A-Za-zŽžÀ-ÿ0-9_-]{0,62}:[A-Za-zŽžÀ-ÿ0-9_-]{0,63})$","advanced":true},{"param":"firebaseextensions.v1beta.function/kmsKeyName","label":"KMS key name","type":"STRING","description":"Do you want to use a Customer Managed Encryption Key (CMEK) to encrypt this extension's functions? If you set this, you must also set a Docker repository encrypted by that key. See https://cloud.google.com/functions/docs/securing/cmek for more details.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/dockerRepository","label":"Docker repository","type":"STRING","description":"What Docker repository should be used to store function images? Default repository will be used if not set.","validationRegex":"^projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)$","advanced":true},{"param":"firebaseextensions.v1beta.function/location","label":"Cloud Functions location","type":"SELECT","description":"Where do you want to deploy the functions created for this extension? You usually want a location close to your database. For help selecting a location, refer to the [location selection guide](https://firebase.google.com/docs/functions/locations).","required":true,"options":[{"value":"us-central1","label":"Iowa (us-central1)"},{"value":"us-east1","label":"South Carolina (us-east1)"},{"value":"us-east4","label":"Northern Virginia (us-east4)"},{"value":"us-west2","label":"Los Angeles (us-west2)"},{"value":"us-west3","label":"Salt Lake City (us-west3)"},{"value":"us-west4","label":"Las Vegas (us-west4)"},{"value":"europe-central2","label":"Warsaw (europe-central2)"},{"value":"europe-west1","label":"Belgium (europe-west1)"},{"value":"europe-west2","label":"London (europe-west2)"},{"value":"europe-west3","label":"Frankfurt (europe-west3)"},{"value":"europe-west6","label":"Zurich (europe-west6)"},{"value":"asia-east1","label":"Taiwan (asia-east1)"},{"value":"asia-east2","label":"Hong Kong (asia-east2)"},{"value":"asia-northeast1","label":"Tokyo (asia-northeast1)"},{"value":"asia-northeast2","label":"Osaka (asia-northeast2)"},{"value":"asia-northeast3","label":"Seoul (asia-northeast3)"},{"value":"asia-south1","label":"Mumbai (asia-south1)"},{"value":"asia-southeast1","label":"Singapore (asia-southeast1)"},{"value":"asia-southeast2","label":"Jakarta (asia-southeast2)"},{"value":"northamerica-northeast1","label":"Montreal (northamerica-northeast1)"},{"value":"southamerica-east1","label":"Sao Paulo (southamerica-east1)"},{"value":"australia-southeast1","label":"Sydney (australia-southeast1)"}],"default":"us-central1","immutable":true}]},"state":"PUBLISHED","hash":"a54efce96bbf0314fdfe57aa4a1005574fef6dbe276e6551408564d5172e0e76","createTime":"2023-11-30T18:30:39.937277Z","sourceDownloadUri":"https://storage.googleapis.com/firebase-mod-sources-prod/a54efce96bbf0314fdfe57aa4a1005574fef6dbe276e6551408564d5172e0e76","id":"0.2.2","releaseNotes":"feature - allow custom fit option\n\nfeature - add 4 and 8 GB memory options\n","buildSourceUri":"https://github.com/firebase/extensions/tree/01d9102bed2f33b0784a6a0f2b4646e3034c904a","listing":{"state":"APPROVED"},"metrics":{"activeInstallCount":"200"},"extensionRoot":"storage-resize-images"}
[debug] [2023-12-14T15:35:32.252Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/cloudtasks.enqueuer [none]
[debug] [2023-12-14T15:35:32.254Z] >>> [apiv2][query] GET https://iam.googleapis.com/v1/roles/storage.admin [none]
[debug] [2023-12-14T15:35:32.760Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/storage.admin 200
[debug] [2023-12-14T15:35:32.761Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/storage.admin {"name":"roles/storage.admin","title":"Storage Admin","description":"Grants full control of buckets and objects.","includedPermissions":["firebase.projects.get","orgpolicy.policy.get","recommender.iamPolicyInsights.get","recommender.iamPolicyInsights.list","recommender.iamPolicyInsights.update","recommender.iamPolicyRecommendations.get","recommender.iamPolicyRecommendations.list","recommender.iamPolicyRecommendations.update","resourcemanager.projects.get","resourcemanager.projects.list","storage.buckets.create","storage.buckets.createTagBinding","storage.buckets.delete","storage.buckets.deleteTagBinding","storage.buckets.enableObjectRetention","storage.buckets.get","storage.buckets.getIamPolicy","storage.buckets.getObjectInsights","storage.buckets.list","storage.buckets.listEffectiveTags","storage.buckets.listTagBindings","storage.buckets.setIamPolicy","storage.buckets.update","storage.managedFolders.create","storage.managedFolders.delete","storage.managedFolders.get","storage.managedFolders.getIamPolicy","storage.managedFolders.list","storage.managedFolders.setIamPolicy","storage.multipartUploads.abort","storage.multipartUploads.create","storage.multipartUploads.list","storage.multipartUploads.listParts","storage.objects.create","storage.objects.delete","storage.objects.get","storage.objects.getIamPolicy","storage.objects.list","storage.objects.overrideUnlockedRetention","storage.objects.setIamPolicy","storage.objects.setRetention","storage.objects.update"],"stage":"GA","etag":"AA=="}
[debug] [2023-12-14T15:35:33.061Z] <<< [apiv2][status] GET https://iam.googleapis.com/v1/roles/cloudtasks.enqueuer 200
[debug] [2023-12-14T15:35:33.062Z] <<< [apiv2][body] GET https://iam.googleapis.com/v1/roles/cloudtasks.enqueuer {"name":"roles/cloudtasks.enqueuer","title":"Cloud Tasks Enqueuer","description":"Access to create tasks.","includedPermissions":["cloudtasks.tasks.create","cloudtasks.tasks.fullView","resourcemanager.projects.get","resourcemanager.projects.list"],"stage":"BETA","etag":"AA=="}
[info] 
Extension: Resize Images (firebase/storage-resize-images)
Description: Resizes images uploaded to Cloud Storage to a specified size, and optionally keeps or deletes the original image.
Version: 0.2.2 - Latest
Review status: Accepted
View in Extensions Hub: https://extensions.dev/extensions/firebase/storage-resize-images
Source in GitHub: https://github.com/firebase/extensions/tree/01d9102bed2f33b0784a6a0f2b4646e3034c904a/storage-resize-images
License: Apache-2.0
Resources created:
  - generateResizedImage (Cloud Function (1st gen)): Listens for new images uploaded to your specified Cloud Storage bucket, resizes the images, then stores the resized images in the same bucket. Optionally keeps or deletes the original images.
  - backfillResizedImages (Cloud Function (1st gen)): Handles tasks from startBackfill to resize existing images.
  - backfillResizedImages (Cloud Task queue)
Events emitted:
  - firebase.extensions.storage-resize-images.v1.onStart: Occurs when a trigger has been called within the Extension, and will include data such as the context of the trigger request.
  - firebase.extensions.storage-resize-images.v1.onSuccess: Occurs when image resizing completes successfully. The event will contain further details about specific formats and sizes.
  - firebase.extensions.storage-resize-images.v1.onError: Occurs when an issue has been experienced in the Extension. This will include any error data that has been included within the Error Exception.
  - firebase.extensions.storage-resize-images.v1.onCompletion: Occurs when the function is settled. Provides no customized data other than the context.
APIs used:
  - cloudtasks.googleapis.com: Allows the extension to enqueue Cloud Tasks.
  - storage-component.googleapis.com: Needed to use Cloud Storage
Roles granted:
  - Cloud Tasks Enqueuer: Access to create tasks.
  - Storage Admin: Grants full control of buckets and objects.
[info] 
[debug] [2023-12-14T15:35:37.455Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project/adminSdkConfig [none]
[debug] [2023-12-14T15:35:37.701Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project/adminSdkConfig 200
[debug] [2023-12-14T15:35:37.701Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project/adminSdkConfig {"projectId":"burnout-project","storageBucket":"burnout-project.appspot.com","locationId":"europe-west2"}
[debug] [2023-12-14T15:35:37.702Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project [none]
[debug] [2023-12-14T15:35:37.932Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project 200
[debug] [2023-12-14T15:35:37.933Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/burnout-project {"projectId":"burnout-project","projectNumber":"941881196808","displayName":"The Burnout Project","name":"projects/burnout-project","resources":{"hostingSite":"burnout-project","storageBucket":"burnout-project.appspot.com","locationId":"europe-west2"},"state":"ACTIVE","etag":"1_0a7baf8e-fc98-4d25-ab02-0e57a53b81bb"}
[info] i  extensions: answer the questions below to configure your extension: 
[info] 
Cloud Storage bucket for images: To which Cloud Storage bucket will you upload images that you want to resize? Resized images will be stored in this bucket. Depending on your extension configuration, original images are either kept or deleted. It is recommended to create a separate bucket for this extension. For more information, refer to the pre-installation guide (https://firebase.google.com/products/extensions/storage-resize-images).
